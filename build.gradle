/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andes' at '4/29/15 3:01 PM' with Gradle 2.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.1"
    id "java"
    id "com.github.johnrengelman.shadow" version "1.2.4"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

def siteUrl = 'https://github.com/gde-vt/veritrans-java'
def gitUrl = 'https://github.com/gde-vt/veritrans-java.git'
def gitIssuesUrl = 'https://github.com/gde-vt/veritrans-java/issues'

group = 'id.co.veritrans'
version = '1.3.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1'
    compile 'commons-codec:commons-codec:1.10'

    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.2.0.Beta1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.4'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.4'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.4'

    testCompile 'org.slf4j:log4j-over-slf4j:1.7.12'
    testCompile 'ch.qos.logback:logback-classic:1.1.3'
    testCompile 'org.testng:testng:6.8.17'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

test {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }

    useTestNG {
        excludeGroups 'integrationTest', 'disabled'
    }
}

task integrationTest(type: Test, dependsOn: 'test') {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }

    useTestNG() {
        includeGroups 'integrationTest'
    }
}

configurations.all {
    resolutionStrategy {
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
    archives shadowJar
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'jar'

                // Add your description here
                name 'Veritrans Java Client Library'
                description = 'Official Payment API Java Client.'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'Unlicense'
                        url 'http://unlicense.org/UNLICENSE'
                    }
                }
                developers {
                    [
                            developer {
                                id 'gde.satrigraha'
                                name 'Gde Mahardhikha Satrigraha'
                                email 'gde.satrigraha@veritrans.co.id'
                            },
                            developer {
                                id 'andes.yudanto'
                                name 'Andes Haryo Yudanto'
                                email 'andes.yudanto@veritrans.co.id'
                            },
                    ]
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

def Properties bintrayProperties = new Properties()
bintrayProperties.load(project.file('bintray.properties').newDataInputStream())

bintray {
    user = bintrayProperties.getProperty("bintray.user")
    key = bintrayProperties.getProperty("bintray.apikey")

    configurations = ['archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'veritrans-java-client'
        userOrg = 'pt-midtrans'
        desc = 'Official Veritrans Indonesia Payment API Java Client.'

        websiteUrl = siteUrl
        issueTrackerUrl = gitIssuesUrl
        vcsUrl = gitUrl

        licenses = ['Unlicense']
        publicDownloadNumbers = true

        //Optional version descriptor
        version {
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayProperties.getProperty("bintray.gpg.passphrase") //Optional. The passphrase for GPG signing'
            }

            //Optional configuration for Maven Central Synchronization
            mavenCentralSync {
                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = bintrayProperties.getProperty("bintray.oss.user") //OSS user token
                password = bintrayProperties.getProperty("bintray.oss.password") //OSS user password
                close = '0' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}
